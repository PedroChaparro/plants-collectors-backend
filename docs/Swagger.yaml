openapi: 3.0.0

info:
  version: "1.0.0"
  title: Plants Collectors API
  description: REST API to manage the users, products, favorites and ratings of the "Plants collectors" app.

paths:
  # --- --- ---
  # User routes
  /user/signup:
    post:
      tags:
        - User
      description: Creates a new user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "pedrochaparro"
                email:
                  type: string
                  example: "pchaparro@gmail.com"
                password:
                  type: string
                  example: "pedro1234"
        required: true
      responses:
        "201":
          description: All the fields were OK and the user was successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "409":
          description: There is already another user using the given username / email.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailResponse"

  /user/favorites:
    post:
      tags:
        - User
      description: Get the user's favorites.
      security:
        - BearerAuth: [Access Token]
      responses:
        "200":
          description: The user's favorites were retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Favorites retrieved successfully
                  favorites:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
        "401":
          description: The access token was not provided or is not valid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokesIsNotValid"
        "403":
          description: The access token has expired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenHasExpiredResponse"

  /user/favorites/{product_id}:
    delete:
      tags:
        - User
      description: Remove one product from the user's favorites
      security:
        - BearerAuth: [Access Token]
      parameters:
        - in: path
          name: product_id
          schema:
            type: number
            example: 1
          required: true
      responses:
        "200":
          description: The plant was removed from the user's favorites
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          description: The access token was not provided or is not valid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokesIsNotValid"
        "403":
          description: The access token has expired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenHasExpiredResponse"
        "404":
          description: There is no plant with the given id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailResponse"
        "409":
          description: The plant doesn't exist on the user's favorites.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailResponse"

    post:
      tags:
        - User
      description: Add one product to the user's favorites.
      security:
        - BearerAuth: [Access Token]
      parameters:
        - in: path
          name: product_id
          schema:
            type: number
            example: 1
          required: true
      responses:
        "200":
          description: The plant was successfully added to the user's favorites.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          description: The access token was not provided or is not valid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokesIsNotValid"
        "403":
          description: The access token has expired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenHasExpiredResponse"
        "404":
          description: There is no plant with the given id.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailResponse"
        "409":
          description: The plant doesn't exist on the user's favorites.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailResponse"

  # --- --- ---
  # Products routes
  /product:
    get:
      tags:
        - Products
      description: Get all the plants
      responses:
        "200":
          description: The plants were successfully retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Plants retrieved successfully
                  plants:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"

  # --- --- ---
  # Session routes
  /session/login:
    post:
      tags:
        - Session
      description: Login to get the access and refresh tokens.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: pedrochaparro
                password:
                  type: string
                  example: pedro234
        required: true
      responses:
        "200":
          description: Login was successfull.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Login successful
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTEsInVzZXJuYW1lIjoicGVkcm9jaGFwYXJybyIsImlhdCI6MTY3ODAzNTExMSwibmJmIjoxNjc4MDM1MTExLCJleHAiOjE2NzgwMzYwMTEsImlzcyI6InBsYW50c19jb2xsZWN0b3JzX2FwaSIsInN1YiI6IjExIn0.X0DkhexnzhXug7529mWAWUabKDk7_--ECen4EkrTYDo"
                  refreshToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTEsInVzZXJuYW1lIjoicGVkcm9jaGFwYXJybyIsImlhdCI6MTY3ODAzNTExMSwibmJmIjoxNjc4MDM1MTExLCJleHAiOjE2Nzg2Mzk5MTEsImlzcyI6InBsYW50c19jb2xsZWN0b3JzX2FwaSIsInN1YiI6IjExIn0.NwFsK1NJAkM1Cyb_3tNnhKm_c0prcxeZN2HDWZPTEX4"
        "401":
          description: The password is incorrect.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailResponse"
        "404":
          description: There is user with the given username.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailResponse"

  /session/validate:
    get:
      tags:
        - Session
      description: Validate if the access token is still valid and not expired.
      security:
        - BearerAuth: [Access Token]
      responses:
        "200":
          description: The access token is valid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          description: The access token was not provided or is not valid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokesIsNotValid"
        "403":
          description: The access token has expired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenHasExpiredResponse"

  /session/refresh:
    get:
      tags:
        - Session
      description: Obtain a new access token from a valid refresh token.
      security:
        - BearerAuth: [Refresh Token]
      responses:
        "200":
          description: Login was successfull.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: New access token generated
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTEsInVzZXJuYW1lIjoicGVkcm9jaGFwYXJybyIsImlhdCI6MTY3ODAzNTExMSwibmJmIjoxNjc4MDM1MTExLCJleHAiOjE2NzgwMzYwMTEsImlzcyI6InBsYW50c19jb2xsZWN0b3JzX2FwaSIsInN1YiI6IjExIn0.X0DkhexnzhXug7529mWAWUabKDk7_--ECen4EkrTYDo"
        "401":
          description: The refresh token was not provided or is not valid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokesIsNotValid"
        "403":
          description: The refresh token has expired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenHasExpiredResponse"

# --- --- ---
# Reusable components
components:
  # --- --- ---
  # Authorization schemas
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  # --- --- ---
  # Responses schemas
  schemas:
    SuccessResponse:
      type: object
      properties:
        error:
          type: boolean
          example: false
        message:
          type: string
          example: "Request was successfully completed"
    FailResponse:
      type: object
      properties:
        error:
          type: boolean
          example: true
        message:
          type: string
          example: "Request wasn't successfully completed. Please, try again later."
    TokenHasExpiredResponse:
      type: object
      properties:
        error:
          type: boolean
          example: true
        message:
          type: string
          example: "[Access/Refresh] token has expired"
    TokesIsNotValid:
      type: object
      properties:
        error:
          type: boolean
          example: true
        message:
          type: string
          example: "[Access/Refresh] token is invalid"
    # --- --- ---
    # Models
    Product:
      type: object
      properties:
        plant_id:
          type: number
          example: 1
        plant_name:
          type: string
          example: Red Dahlia
        average_rate:
          type: number
          example: 4.6
        owner_username:
          type: string
          example: Mossie_Zemlak
        image_endpoint:
          type: string
          example: /static/red_dahlia.jpg
